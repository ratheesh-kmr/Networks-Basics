#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <chrono>

const int PORT = 8080;
const int BUFFER_SIZE = 1024;

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        error("ERROR opening socket");
    }

    bzero((char *) &server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);

    if (inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr) <= 0) {
        error("Invalid address/ Address not supported");
    }

    auto start_time = std::chrono::high_resolution_clock::now();
    if (connect(sockfd, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0) {
        error("Connection Failed");
    }
    auto end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> connect_duration = end_time - start_time;
    std::cout << "Time taken to establish connection: " << connect_duration.count() << " seconds" << std::endl;

    while (true) {
        std::cout << "Please enter the message: ";
        bzero(buffer, BUFFER_SIZE);
        std::cin.getline(buffer, BUFFER_SIZE);

        if (std::strcmp(buffer, "exit") == 0) {
            break;
        }

        start_time = std::chrono::high_resolution_clock::now();
        int n = write(sockfd, buffer, strlen(buffer));
        if (n < 0) {
            error("ERROR writing to socket");
        }

        bzero(buffer, BUFFER_SIZE);
        n = read(sockfd, buffer, BUFFER_SIZE - 1);
        if (n < 0) {
            error("ERROR reading from socket");
        }
        end_time = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> echo_duration = end_time - start_time;
        std::cout << "Time taken to receive echo: " << echo_duration.count() << " seconds" << std::endl;

        std::cout << "Echo from server: " << buffer << std::endl;
    }

    close(sockfd);
    return 0;
}
